/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: phonebook/v1/address.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace phonebook.v1 {
    export class Address extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3], [4], [5], [6]];
        constructor(data?: any[] | ({
            addressLine1?: string;
        } & (({
            addressLine2?: string;
        }) | ({
            postalCode?: string;
        }) | ({
            city?: string;
        }) | ({
            state?: string;
        }) | ({
            country?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("addressLine1" in data && data.addressLine1 != undefined) {
                    this.addressLine1 = data.addressLine1;
                }
                if ("addressLine2" in data && data.addressLine2 != undefined) {
                    this.addressLine2 = data.addressLine2;
                }
                if ("postalCode" in data && data.postalCode != undefined) {
                    this.postalCode = data.postalCode;
                }
                if ("city" in data && data.city != undefined) {
                    this.city = data.city;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
            }
        }
        get addressLine1() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set addressLine1(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get addressLine2() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set addressLine2(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get hasAddressLine2() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get postalCode() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set postalCode(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get hasPostalCode() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get city() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set city(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get hasCity() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
        }
        get hasState() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[4], value);
        }
        get hasCountry() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get _address_line_2() {
            const cases: {
                [index: number]: "none" | "addressLine2";
            } = {
                0: "none",
                2: "addressLine2"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _postal_code() {
            const cases: {
                [index: number]: "none" | "postalCode";
            } = {
                0: "none",
                3: "postalCode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _city() {
            const cases: {
                [index: number]: "none" | "city";
            } = {
                0: "none",
                4: "city"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _state() {
            const cases: {
                [index: number]: "none" | "state";
            } = {
                0: "none",
                5: "state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _country() {
            const cases: {
                [index: number]: "none" | "country";
            } = {
                0: "none",
                6: "country"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            addressLine1?: string;
            addressLine2?: string;
            postalCode?: string;
            city?: string;
            state?: string;
            country?: string;
        }): Address {
            const message = new Address({});
            if (data.addressLine1 != null) {
                message.addressLine1 = data.addressLine1;
            }
            if (data.addressLine2 != null) {
                message.addressLine2 = data.addressLine2;
            }
            if (data.postalCode != null) {
                message.postalCode = data.postalCode;
            }
            if (data.city != null) {
                message.city = data.city;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            return message;
        }
        toObject() {
            const data: {
                addressLine1?: string;
                addressLine2?: string;
                postalCode?: string;
                city?: string;
                state?: string;
                country?: string;
            } = {};
            if (this.addressLine1 != null) {
                data.addressLine1 = this.addressLine1;
            }
            if (this.addressLine2 != null) {
                data.addressLine2 = this.addressLine2;
            }
            if (this.postalCode != null) {
                data.postalCode = this.postalCode;
            }
            if (this.city != null) {
                data.city = this.city;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.addressLine1.length)
                writer.writeString(1, this.addressLine1);
            if (this.hasAddressLine2)
                writer.writeString(2, this.addressLine2);
            if (this.hasPostalCode)
                writer.writeString(3, this.postalCode);
            if (this.hasCity)
                writer.writeString(4, this.city);
            if (this.hasState)
                writer.writeString(5, this.state);
            if (this.hasCountry)
                writer.writeString(6, this.country);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Address {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Address();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.addressLine1 = reader.readString();
                        break;
                    case 2:
                        message.addressLine2 = reader.readString();
                        break;
                    case 3:
                        message.postalCode = reader.readString();
                        break;
                    case 4:
                        message.city = reader.readString();
                        break;
                    case 5:
                        message.state = reader.readString();
                        break;
                    case 6:
                        message.country = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Address {
            return Address.deserialize(bytes);
        }
    }
}
