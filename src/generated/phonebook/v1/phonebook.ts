/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: phonebook/v1/phonebook.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./contact";
import * as pb_1 from "google-protobuf";
export namespace phonebook.v1 {
    export class PhoneBook extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contact?: dependency_1.phonebook.v1.Contact[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contact" in data && data.contact != undefined) {
                    this.contact = data.contact;
                }
            }
        }
        get contact() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.phonebook.v1.Contact, 1) as dependency_1.phonebook.v1.Contact[];
        }
        set contact(value: dependency_1.phonebook.v1.Contact[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            contact?: ReturnType<typeof dependency_1.phonebook.v1.Contact.prototype.toObject>[];
        }): PhoneBook {
            const message = new PhoneBook({});
            if (data.contact != null) {
                message.contact = data.contact.map(item => dependency_1.phonebook.v1.Contact.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                contact?: ReturnType<typeof dependency_1.phonebook.v1.Contact.prototype.toObject>[];
            } = {};
            if (this.contact != null) {
                data.contact = this.contact.map((item: dependency_1.phonebook.v1.Contact) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contact.length)
                writer.writeRepeatedMessage(1, this.contact, (item: dependency_1.phonebook.v1.Contact) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PhoneBook {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PhoneBook();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.contact, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.phonebook.v1.Contact.deserialize(reader), dependency_1.phonebook.v1.Contact));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PhoneBook {
            return PhoneBook.deserialize(bytes);
        }
    }
}
